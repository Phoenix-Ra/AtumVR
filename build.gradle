import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
buildscript {
    //-------VERSIONING-------
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def version_active = versionProps['version.active'].toBoolean()
    def isSnapshot     = versionProps['version.snapshot'].toBoolean()
    def version_stage= versionProps['version.stage'].toString()

    def version_major  = versionProps['version.major'].toInteger()
    def version_minor  = versionProps['version.minor'].toInteger()
    def version_patch  = versionProps['version.patch'].toInteger()
    def version_build  = versionProps['version.build'].toInteger()


    if (isSnapshot) {
        if(version_active){
            version_build += 1
        }
        version = "${version_major}.${version_minor}.${version_patch}${version_stage}-snapshot#${version_build}"
        System.out.println("VERSIONING-SNAPSHOT")
    } else {
        version = "${version_major}.${version_minor}.${version_patch}${version_stage}"
        System.out.println("VERSIONING-RELEASE")

    }

    project.version = version
    //-------VERSIONING END-------
}

plugins {
    id 'java'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id 'maven-publish'
}
archivesBaseName = project_name
group = project_group

//------VERSION UPDATE IN FILE------
task updateVersion{
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def version_active = versionProps['version.active'].toBoolean()
    def isSnapshot     = versionProps['version.snapshot'].toBoolean()
    def version_build  = isSnapshot?
            project.version.toString().split("#")[1] : 0
    if(version_active){
        def propsFilePath = file('version.properties').absolutePath
        def lines = Files.readAllLines(Paths.get(propsFilePath))
        def updatedLines = []
        lines.each { line ->
            if (line.startsWith("version.build=")) {
                line = "version.build=$version_build"
            } else if (line.startsWith("version.snapshot=")) {
                line = "version.snapshot=true"
            }
            updatedLines.add(line)
        }
        Files.write(Paths.get(propsFilePath), updatedLines, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)
        System.out.println("UPDATING BUILD VERSION")
    }
}
shadowJar.dependsOn(updateVersion)
//------VERSION UPDATE FINISH------

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://redempt.dev' }
    }
    dependencies {

        //annotations
        compileOnly("org.projectlombok:lombok:1.18.30")
        compileOnly("org.jetbrains:annotations:23.0.0")
        annotationProcessor("org.projectlombok:lombok:1.18.30")
        annotationProcessor("org.jetbrains:annotations:23.0.0")
    }
    build{
        dependsOn(shadowJar)
    }
    compileJava{
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
        [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
        dependsOn(clean)
    }


}

dependencies {
    implementation(project('atumvr-api'))
    implementation(project('atumvr-core'))

}