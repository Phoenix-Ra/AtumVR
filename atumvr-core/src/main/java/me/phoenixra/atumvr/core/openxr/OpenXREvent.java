package me.phoenixra.atumvr.core.openxr;

import lombok.Getter;
import org.lwjgl.openxr.*;

import java.util.HashMap;

public enum OpenXREvent {
    DISPLAY_REFRESH_RATE_CHANGED_FB(FBDisplayRefreshRate.XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB),
    EVENTS_LOST(XR10.XR_TYPE_EVENT_DATA_EVENTS_LOST),
    EYE_CALIBRATION_CHANGED_ML(MLUserCalibration.XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML),
    HEADSET_FIT_CHANGED_ML(MLUserCalibration.XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML),
    INSTANCE_LOSS_PENDING(XR10.XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING),
    INTERACTION_PROFILE_CHANGED(XR10.XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED),
    LOCALIZATION_CHANGED_ML(MLLocalizationMap.XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML),
    MAIN_SESSION_VISIBILITY_CHANGED_EXTX(EXTXOverlay.XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX),
    MARKER_TRACKING_UPDATE_VARJO(VARJOMarkerTracking.XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO),
    PERF_SETTINGS_EXT(EXTPerformanceSettings.XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT),
    REFERENCE_SPACE_CHANGE_PENDING(XR10.XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING),
    SESSION_STATE_CHANGED(XR10.XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED),
    SPACE_ERASE_COMPLETE_FB(FBSpatialEntityStorage.XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB),
    SPACE_LIST_SAVE_COMPLETE_FB(FBSpatialEntityStorageBatch.XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB),
    SPACE_QUERY_COMPLETE_FB(FBSpatialEntityQuery.XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB),
    SPACE_QUERY_RESULTS_AVAILABLE_FB(FBSpatialEntityQuery.XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB),
    SPACE_SAVE_COMPLETE_FB(FBSpatialEntityStorage.XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB),
    SPACE_SET_STATUS_COMPLETE_FB(FBSpatialEntity.XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB),
    SPACE_SHARE_COMPLETE_FB(FBSpatialEntitySharing.XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB),
    SPATIAL_ANCHOR_CREATE_COMPLETE_FB(FBSpatialEntity.XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB),
    VISIBILITY_MASK_CHANGED_KHR(KHRVisibilityMask.XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR),
    VIVE_TRACKER_CONNECTED_HTCX(HTCXViveTrackerInteraction.XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX);

    @Getter
    private final int id;

    private static final HashMap<Integer, OpenXREvent> values = new HashMap<>();


    OpenXREvent(int id){
        this.id = id;
    }

    public static OpenXREvent fromId(int id){
        if(values.isEmpty()){
            for(OpenXREvent event : values()){
                values.put(event.id,event);
            }
        }
        return values.get(id);
    }

}
